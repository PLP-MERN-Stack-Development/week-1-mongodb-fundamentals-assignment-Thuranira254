//Task 1: MongoDB Setup
// Switch to (or create) the plp_bookstore database
use plp_bookstore

// Create the books collection (optional, as it will be created on first insert)
db.createCollection("books")

//Task 2: Basic CRUD Operations
db.books.insertOne({
  title: 'To Kill a Mockingbird',
  author: 'Harper Lee',
  genre: 'Fiction',
  published_year: 1960,
  price: 12.99,
  in_stock: true,
  pages: 336,
  publisher: 'J. B. Lippincott & Co.'
})

db.books.insertOne({
  title: '1984',
  author: 'George Orwell',
  genre: 'Dystopian',
  published_year: 1949,
  price: 10.99,
  in_stock: true,
  pages: 328,
  publisher: 'Secker & Warburg'
})

db.books.insertOne({
  title: 'The Great Gatsby',
  author: 'F. Scott Fitzgerald',
  genre: 'Fiction',
  published_year: 1925,
  price: 9.99,
  in_stock: true,
  pages: 180,
  publisher: "Charles Scribner's Sons"
})

db.books.insertOne({
  title: 'Brave New World',
  author: 'Aldous Huxley',
  genre: 'Dystopian',
  published_year: 1932,
  price: 11.50,
  in_stock: false,
  pages: 311,
  publisher: 'Chatto & Windus'
})

db.books.insertOne({
  title: 'The Hobbit',
  author: 'J.R.R. Tolkien',
  genre: 'Fantasy',
  published_year: 1937,
  price: 14.99,
  in_stock: true,
  pages: 310,
  publisher: 'George Allen & Unwin'
})

db.books.insertOne({
  title: 'The Catcher in the Rye',
  author: 'J.D. Salinger',
  genre: 'Fiction',
  published_year: 1951,
  price: 8.99,
  in_stock: true,
  pages: 224,
  publisher: 'Little, Brown and Company'
})

db.books.insertOne({
  title: 'Pride and Prejudice',
  author: 'Jane Austen',
  genre: 'Romance',
  published_year: 1813,
  price: 7.99,
  in_stock: true,
  pages: 432,
  publisher: 'T. Egerton, Whitehall'
})

db.books.insertOne({
  title: 'The Lord of the Rings',
  author: 'J.R.R. Tolkien',
  genre: 'Fantasy',
  published_year: 1954,
  price: 19.99,
  in_stock: true,
  pages: 1178,
  publisher: 'Allen & Unwin'
})

db.books.insertOne({
  title: 'Animal Farm',
  author: 'George Orwell',
  genre: 'Political Satire',
  published_year: 1945,
  price: 8.50,
  in_stock: false,
  pages: 112,
  publisher: 'Secker & Warburg'
})

db.books.insertOne({
  title: 'The Alchemist',
  author: 'Paulo Coelho',
  genre: 'Fiction',
  published_year: 1988,
  price: 10.99,
  in_stock: true,
  pages: 197,
  publisher: 'HarperOne'
})

db.books.insertOne({
  title: 'Moby Dick',
  author: 'Herman Melville',
  genre: 'Adventure',
  published_year: 1851,
  price: 12.50,
  in_stock: false,
  pages: 635,
  publisher: 'Harper & Brothers'
})

db.books.insertOne({
  title: 'Wuthering Heights',
  author: 'Emily BrontÃ«',
  genre: 'Gothic Fiction',
  published_year: 1847,
  price: 9.99,
  in_stock: true,
  pages: 342,
  publisher: 'Thomas Cautley Newby'
})


//Task 3: Advanced Queries
// Find all books in a specific genre (e.g., 'Fiction')
db.books.find({ genre: 'Fiction' })

// Find books published after a certain year (e.g., after 1950)
db.books.find({ published_year: { $gt: 1950 } })

// Find books by a specific author (e.g., 'George Orwell')
db.books.find({ author: 'George Orwell' })

// Update the price of a specific book (e.g., set '1984' price to 15.99)
db.books.updateOne(
  { title: '1984' },
  { $set: { price: 15.99 } }
)

// Delete a book by its title (e.g., delete 'Moby Dick')
db.books.deleteOne({ title: 'Moby Dick' })


//Task 4: Aggregation Pipeline
// Find books that are both in stock and published after 2010
db.books.find(
  { in_stock: true, published_year: { $gt: 2010 } }
)

// Use projection to return only the title, author, and price fields
db.books.find(
  {},
  { _id: 0, title: 1, author: 1, price: 1 }
)

// Sort books by price in ascending order
db.books.find().sort({ price: 1 })

// Sort books by price in descending order
db.books.find().sort({ price: -1 })

// Pagination: Get page 1 (first 5 books by price ascending)
db.books.find().sort({ price: 1 }).skip(0).limit(5)

// Pagination: Get page 2 (next 5 books by price ascending)
db.books.find().sort({ price: 1 }).skip(5).limit(5)


//Task 5: Indexing
// 1. Calculate the average price of books by genre
db.books.aggregate([
  { $group: { _id: "$genre", averagePrice: { $avg: "$price" } } }
])

// 2. Find the author with the most books in the collection
db.books.aggregate([
  { $group: { _id: "$author", count: { $sum: 1 } } },
  { $sort: { count: -1 } },
  { $limit: 1 }
])

// 3. Group books by publication decade and count them
db.books.aggregate([
  {
    $group: {
      _id: { $concat: [
        { $toString: { $multiply: [ { $floor: { $divide: ["$published_year", 10] } }, 10 ] } },
        "s"
      ] },
      count: { $sum: 1 }
    }
  },
  { $sort: { _id: 1 } }
])





